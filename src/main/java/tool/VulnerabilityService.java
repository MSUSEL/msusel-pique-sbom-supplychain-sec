/**
 * MIT License
 * Copyright (c) 2019 Montana State University Software Engineering Labs
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package tool;

import exceptions.ApiCallException;
import exceptions.DataAccessException;
import lombok.Getter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import presentation.PiqueData;
import toolOutputObjects.RelevantVulnerabilityData;
import utilities.helperFunctions;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class VulnerabilityService {
    private final String GRYPE = "Grype";
    private final String TRIVY = "Trivy";
    private final String PARSE_JSON_ERROR_MESSAGE = "Unable to parse json. ";
    private final PiqueData piqueData;
    @Getter private final String toolName;
    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityService.class);

    public VulnerabilityService(PiqueData piqueData, String toolName) {
        this.piqueData = piqueData;
        this.toolName = toolName;
    }

    /**
     * Extracts vulnerabilities from results taking into account specific tool output under analysis
     * @param results
     * @return
     */
    public JSONArray extractVulnerabilities(String results) {
        JSONArray vulnerabilities;

        if (toolName.contains(GRYPE)) {
            vulnerabilities = extractGrypeVulnerabilities(results);
        } else if (toolName.contains(TRIVY)) {
            vulnerabilities = extractTrivyVulnerabilities(results);
            // TODO get CveBin tool name and handle with else if
        } else {
            vulnerabilities = extractCveBinToolVulnerabilities(results);
        }

        return vulnerabilities;
    }

    /**
     * Processes vulnerability information
     *
     * @param jsonVulns vulnerabilities extracted from tool output
     * @return List of formatted vulnerability data
     */
    public List<RelevantVulnerabilityData> processVulnerabilities(JSONArray jsonVulns) {
        List<RelevantVulnerabilityData> data;
        String GRYPE_ID_KEY = "id";
        String GRYPE_SEVERITY_KEY = "severity";
        String TRIVY_ID_KEY = "VulnerabilityID";
        String TRIVY_SEVERITY_KEY = "Severity";
        String CVEBIN_ID_KEY = "cve_number";
        String CVEBIN_SEVERITY_KEY = "severity";

        if (toolName.contains(GRYPE)) {
            data = formatVulnerabilityData(jsonVulns, GRYPE_ID_KEY, GRYPE_SEVERITY_KEY);
        } else if (toolName.contains(TRIVY)) {
            data = formatVulnerabilityData(jsonVulns, TRIVY_ID_KEY, TRIVY_SEVERITY_KEY);
        } else {
            data = formatVulnerabilityData(jsonVulns, CVEBIN_ID_KEY, CVEBIN_SEVERITY_KEY);
        }

        return data;
    }

    private JSONArray extractGrypeVulnerabilities(String results) {
        try {
            JSONArray matches = new JSONObject(results).optJSONArray("matches");
            JSONArray vulnerabilities = new JSONArray();
            for (int i = 0; matches != null && i < matches.length(); i++) {
                JSONObject vulnerability = matches.getJSONObject(i).optJSONObject("vulnerability");
                if (vulnerability != null) vulnerabilities.put(vulnerability);
            }
            return vulnerabilities;
        } catch (JSONException e) {
            LOGGER.warn("Unable to read results from {} output", toolName);
        }

        return null;
    }

    private JSONArray extractTrivyVulnerabilities(String results) {
        try {
            JSONArray resultsArray = new JSONObject(results).optJSONArray("Results");
            JSONArray vulnerabilities = new JSONArray();
            if (resultsArray != null && resultsArray.length() > 0) {
                JSONArray vulnerabilitiesArray = resultsArray.optJSONObject(0).optJSONArray("Vulnerabilities");
                for (int i = 0; vulnerabilitiesArray != null && i < vulnerabilitiesArray.length(); i++) {
                    JSONObject vulnerability = vulnerabilitiesArray.optJSONObject(i);
                    if (vulnerability != null) vulnerabilities.put(vulnerability);
                }
            }
            return vulnerabilities;
        } catch (JSONException e) {
            LOGGER.warn("Unable to read results from {} output", toolName);
        }

        return null;
    }

    private JSONArray extractCveBinToolVulnerabilities(String results) {
        try {
            JSONArray vulnerabilities = new JSONArray(results); // Assuming jsonData is a string containing the JSON array.
            JSONArray extractedVulnerabilities = new JSONArray();
            for (int i = 0; i < vulnerabilities.length(); i++) {
                JSONObject vulnerability = vulnerabilities.getJSONObject(i); // Directly accessing the vulnerability object.
                if (vulnerability != null)
                    extractedVulnerabilities.put(vulnerability); // Adding directly to the result array if it exists.
            }
            return extractedVulnerabilities;
        }
        catch (JSONException e) {
            LOGGER.warn("Unable to read results from {} output", toolName);
        }
        return null;
    }

    private List<RelevantVulnerabilityData> formatVulnerabilityData(JSONArray jsonVulns, String idKey, String severityKey) {
        List<RelevantVulnerabilityData> toolVulnerabilities = new ArrayList<>();

        for (int i = 0; i < jsonVulns.length(); i++) {
            JSONObject jsonFinding = extractJsonFinding(jsonVulns, i);
            String rawId = extractRawId(jsonFinding, idKey);

            if (!fetchCwes(rawId).isEmpty()) {
                toolVulnerabilities.add(
                        new RelevantVulnerabilityData(
                                        formatVulnerabilityId(rawId),
                                        fetchCwes(rawId),
                                        helperFunctions.severityToInt(extractSeverity(jsonFinding, severityKey))));
            }
        }

        return toolVulnerabilities;
    }

    private String formatVulnerabilityId(String id) {
        Pattern pattern = Pattern.compile("CVE-\\d{3,4}-\\d{3,4}(?=.*)");
        Matcher matcher = pattern.matcher(id);

        return matcher.find() ? id.substring(0, matcher.end()) : "";
    }

    private JSONObject extractJsonFinding(JSONArray jsonVulns, int index) {
        try {
            return (JSONObject) jsonVulns.get(index);
        } catch (JSONException e) {
            LOGGER.warn(PARSE_JSON_ERROR_MESSAGE);
        }

        return new JSONObject();
    }

    private List<String> fetchCwes(String vulnId) {
        List<String> cwes = Collections.emptyList();

        try {
            return vulnId.contains("GHSA") ? piqueData.getCweIdsFromGhsa(vulnId) : piqueData.getCweDescriptions(vulnId);
        } catch (ApiCallException | DataAccessException e) {
            LOGGER.warn("Call failed with error ", e);
        }

        return cwes;
    }

    private String extractRawId(JSONObject jsonFinding, String idKey) {
        try {
            return jsonFinding.get(idKey).toString();
        } catch (JSONException e) {
            LOGGER.warn(PARSE_JSON_ERROR_MESSAGE, e);
        }
        return "";
    }

    private String extractSeverity(JSONObject jsonFinding, String severityKey) {
        try {
            return jsonFinding.optString(severityKey);
        } catch (Exception e) {
            LOGGER.warn(PARSE_JSON_ERROR_MESSAGE, e);
        }
        return "";
    }
}
